:py:mod:`comma.individual`
==========================

.. py:module:: comma.individual

.. autoapi-nested-parse::

   Individual agent class definition



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   comma.individual.Individual




.. py:class:: Individual(id: int, dir_params: str, features)


   .. py:method:: get_features() -> pandas.Series

      Get agent's features

      Returns:
          pd.Series: represents an individual (agent)
          with their various features


   .. py:method:: get_status() -> float

      Get the current agent status (i.e., mental health)

      Returns:
          float: the current status of the agent


   .. py:method:: get_covid_status() -> float

      Get the current agent covid status

      Returns:
          pd.Series: the current covid status of the agent


   .. py:method:: get_actions() -> list[str]

      Get the current actions chosen by the agent

      Returns:
          actions (list): list of actions taken


   .. py:method:: choose_actions_on_lockdown(lockdown: pandas.DataFrame, rng=None) -> tuple[numpy.ndarray, numpy.ndarray]

      Choose the actions to take based on current lockdown policy.

      Args:
          lockdown (pd.DataFrame): dataframe of a given lockdown
          rng (np.random.Generator): optional. An instance of numpy random
          generator. If not provided, a default random generator will be
          used. This ensures reproducibility.

      Returns:
          actions (np.ndarray): array of booleans
          actions_probs (np.ndarray): array of probability


   .. py:method:: is_long_covid()

      Determine if this is a Long covid case.

      This method decides whether an agent is
      considered to be a long COVID case, based on
      a set of probability (currently set to 20% chance)

      Returns:
          bool: True if long COVID, False otherwise



   .. py:method:: is_recovered(rng=None)

      Determine if an individual is recovered based on
      the number of days since testing positive.

      The function uses a gamma cumulative distribution
      function with shape parameter 5 and scale parameter 3
      to model the probability of recovery. This can be of
      course changed based on the literature.
      Note that if `n_days` is equal or lower than 10,
      then the probability of recovering is always 0,
      as per Astrid's suggestion.

      Args:
          n_days (int): Number of days since tested positive.
          rng (np.random.Generator): optional. An instance of numpy random
          generator. If not provided, a default random generator will be
          used. This ensures reproducibility.
      Returns:
          recovery (bool): True if recovered, False otherwise.


   .. py:method:: modify_policy_when_infected(lockdown: pandas.DataFrame)
      :staticmethod:

      Args:
          lockdown (pd.DataFrame): lockdown matrix

      Returns:
          actions (np.ndarray): array of booleans
          actions_probs (np.ndarray): array of probability



   .. py:method:: take_actions(action_effects: pandas.DataFrame) -> None

      Update status by taking the given actions.

      Args:
          actions (pd.Series): list of booleans of chosen/not-chosen actions.
          action_effects (pd.DataFrame): matrix of actions effects

      Returns:
          None: This function updates the agent's status
          but does not return anything.


   .. py:method:: sampling_from_ipf(size: int, dir_params: str, rng=None) -> pandas.DataFrame
      :staticmethod:

      Sample from IPF distribution saved
      as `weights.csv` in the parameters folder

      Parameters
      ----------
      size (int): size of data sample
      dir_params (str): path to the parameters folder
      rng (np.random.Generator): optional. An instance of numpy random
          generator. If not provided, a default random generator will be
          used. This ensures reproducibility.

      Returns
      -------
      sample (pandas.dataFrame): dataframe containing the sampling


   .. py:method:: populate_ipf(size: int, dir_params: str, rng=None) -> list
      :staticmethod:

      Create a population of individual agents
      with the given weights obtained via IPF

      Args:
          size (int): size of data sample.
          dir_params (str): path to parameters folder.
          rng (np.random.Generator): optional. An instance of numpy random
          generator. If not provided, a default random generator will be
          used. This ensures reproducibility.

      Returns:
          List[Individual]: A list containing instances of
          the individual class, each representing an
          agent with specific features.


   .. py:method:: populate(size: int, dir_params: str, rng=None) -> list
      :staticmethod:

      Create a population of individual agents
      with the given feature parameters.

      Args:
          size (int): population size, i.e., number of agents.
          dir_params (str): dir to the folder containing
          feature parameter file.
          #from_scratch (bool, optional): flag of creating hypothesis
          from scratch or reading from files. Defaults to False.
          rng (np.random.Generator): optional. An instance of numpy random
          generator. If not provided, a default random generator will be
          used. This ensures reproducibility.

      Returns:
          list[Individual]: a list of Individual agents



